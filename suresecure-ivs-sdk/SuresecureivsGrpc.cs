// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: suresecureivs.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Suresecureivs {
  public static partial class SurvCenterService
  {
    static readonly string __ServiceName = "suresecureivs.SurvCenterService";

    static readonly Marshaller<global::Suresecureivs.Event> __Marshaller_Event = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Suresecureivs.Event.Parser.ParseFrom);
    static readonly Marshaller<global::Suresecureivs.GeneralReply> __Marshaller_GeneralReply = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Suresecureivs.GeneralReply.Parser.ParseFrom);
    static readonly Marshaller<global::Suresecureivs.HeartbeatRequest> __Marshaller_HeartbeatRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Suresecureivs.HeartbeatRequest.Parser.ParseFrom);

    static readonly Method<global::Suresecureivs.Event, global::Suresecureivs.GeneralReply> __Method_ReportEvent = new Method<global::Suresecureivs.Event, global::Suresecureivs.GeneralReply>(
        MethodType.Unary,
        __ServiceName,
        "ReportEvent",
        __Marshaller_Event,
        __Marshaller_GeneralReply);

    static readonly Method<global::Suresecureivs.HeartbeatRequest, global::Suresecureivs.GeneralReply> __Method_Heartbeat = new Method<global::Suresecureivs.HeartbeatRequest, global::Suresecureivs.GeneralReply>(
        MethodType.Unary,
        __ServiceName,
        "Heartbeat",
        __Marshaller_HeartbeatRequest,
        __Marshaller_GeneralReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SurvCenterService</summary>
    public abstract partial class SurvCenterServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Suresecureivs.GeneralReply> ReportEvent(global::Suresecureivs.Event request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Suresecureivs.GeneralReply> Heartbeat(global::Suresecureivs.HeartbeatRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SurvCenterService</summary>
    public partial class SurvCenterServiceClient : ClientBase<SurvCenterServiceClient>
    {
      /// <summary>Creates a new client for SurvCenterService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SurvCenterServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SurvCenterService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SurvCenterServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SurvCenterServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SurvCenterServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Suresecureivs.GeneralReply ReportEvent(global::Suresecureivs.Event request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ReportEvent(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Suresecureivs.GeneralReply ReportEvent(global::Suresecureivs.Event request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReportEvent, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> ReportEventAsync(global::Suresecureivs.Event request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ReportEventAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> ReportEventAsync(global::Suresecureivs.Event request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReportEvent, null, options, request);
      }
      public virtual global::Suresecureivs.GeneralReply Heartbeat(global::Suresecureivs.HeartbeatRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Heartbeat(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Suresecureivs.GeneralReply Heartbeat(global::Suresecureivs.HeartbeatRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Heartbeat, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> HeartbeatAsync(global::Suresecureivs.HeartbeatRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return HeartbeatAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Suresecureivs.GeneralReply> HeartbeatAsync(global::Suresecureivs.HeartbeatRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Heartbeat, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SurvCenterServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SurvCenterServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static ServerServiceDefinition BindService(SurvCenterServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ReportEvent, serviceImpl.ReportEvent)
          .AddMethod(__Method_Heartbeat, serviceImpl.Heartbeat).Build();
    }

  }
}
#endregion

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: suresecureivs.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Suresecureivs {

  /// <summary>Holder for reflection information generated from suresecureivs.proto</summary>
  public static partial class SuresecureivsReflection {

    #region Descriptor
    /// <summary>File descriptor for suresecureivs.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SuresecureivsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNzdXJlc2VjdXJlaXZzLnByb3RvEg1zdXJlc2VjdXJlaXZzIjMKDEdlbmVy",
            "YWxSZXBseRISCgplcnJvcl9jb2RlGAEgASgFEg8KB21lc3NhZ2UYAiABKAki",
            "QAoQSGVhcnRiZWF0UmVxdWVzdBIWCg5kZXZpY2VfYWRkcmVzcxgBIAEoCRIU",
            "CgxkZXZpY2VfaWRlbnQYAiABKAki0AEKBlRhcmdldBIJCgF4GAEgASgFEgkK",
            "AXkYAiABKAUSCQoBdxgDIAEoBRIJCgFoGAQgASgFEigKBHR5cGUYBSABKA4y",
            "Gi5zdXJlc2VjdXJlaXZzLlRhcmdldC5UeXBlEiwKBnN0YXR1cxgGIAEoDjIc",
            "LnN1cmVzZWN1cmVpdnMuVGFyZ2V0LlN0YXR1cyIeCgRUeXBlEgoKBlBFUlNP",
            "ThAAEgoKBk9CSkVDVBABIiIKBlN0YXR1cxIKCgZOT1JNQUwQABIMCghBQk5P",
            "Uk1BTBABIrkBCgtTZXR0aW5nQXJlYRIsCgR0eXBlGAEgASgOMh4uc3VyZXNl",
            "Y3VyZWl2cy5TZXR0aW5nQXJlYVR5cGUSCQoBeBgCIAMoBRIJCgF5GAMgAygF",
            "EjEKBnN0YXR1cxgEIAEoDjIhLnN1cmVzZWN1cmVpdnMuU2V0dGluZ0FyZWEu",
            "U3RhdHVzEg8KB2NvbW1lbnQYBSABKAkiIgoGU3RhdHVzEgoKBk5PUk1BTBAA",
            "EgwKCEFCTk9STUFMEAEiiQEKDkFubm90YXRlZEltYWdlEgsKA2ltZxgBIAEo",
            "DBIPCgdjb21tZW50GAIgASgJEiYKB3RhcmdldHMYAyADKAsyFS5zdXJlc2Vj",
            "dXJlaXZzLlRhcmdldBIxCg1zZXR0aW5nX2FyZWFzGAQgAygLMhouc3VyZXNl",
            "Y3VyZWl2cy5TZXR0aW5nQXJlYSKVAgoFRXZlbnQSDAoEZ3VpZBgBIAEoCRIM",
            "CgR0eXBlGAIgASgFEg8KB3NlY29uZHMYAyABKAMSEwoLZGVzY3JpcHRpb24Y",
            "BCABKAkSEwoLaG9zdGFkZHJlc3MYBSABKAkSDwoHY2hhbm5lbBgGIAEoBRIW",
            "Cg52aWRlb19maWxlbmFtZRgHIAEoCRIYChBmcm9udGVuZF92ZXJzaW9uGAgg",
            "ASgJEjAKCWFubm9faW1ncxgJIAMoCzIdLnN1cmVzZWN1cmVpdnMuQW5ub3Rh",
            "dGVkSW1hZ2USEgoKcGVyc29uX251bRgKIAEoBRIWCg5tZXRlcl9hcmVhX251",
            "bRgLIAEoBRIUCgxkZXZpY2VfaWRlbnQYDCABKAkqbwoPU2V0dGluZ0FyZWFU",
            "eXBlEg4KCm1ldGVyX2FyZWEQABIOCgpndWFyZF9hcmVhEAESDgoKY3Jvc3Nf",
            "bGluZRACEhAKDGF0bWRvb3JfYXJlYRADEhoKFm9iamVjdF9wcm90ZWN0aW9u",
            "X2FyZWEQBDKkAQoRU3VydkNlbnRlclNlcnZpY2USQgoLUmVwb3J0RXZlbnQS",
            "FC5zdXJlc2VjdXJlaXZzLkV2ZW50Ghsuc3VyZXNlY3VyZWl2cy5HZW5lcmFs",
            "UmVwbHkiABJLCglIZWFydGJlYXQSHy5zdXJlc2VjdXJlaXZzLkhlYXJ0YmVh",
            "dFJlcXVlc3QaGy5zdXJlc2VjdXJlaXZzLkdlbmVyYWxSZXBseSIAYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Suresecureivs.SettingAreaType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.GeneralReply), global::Suresecureivs.GeneralReply.Parser, new[]{ "ErrorCode", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.HeartbeatRequest), global::Suresecureivs.HeartbeatRequest.Parser, new[]{ "DeviceAddress", "DeviceIdent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.Target), global::Suresecureivs.Target.Parser, new[]{ "X", "Y", "W", "H", "Type", "Status" }, null, new[]{ typeof(global::Suresecureivs.Target.Types.Type), typeof(global::Suresecureivs.Target.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.SettingArea), global::Suresecureivs.SettingArea.Parser, new[]{ "Type", "X", "Y", "Status", "Comment" }, null, new[]{ typeof(global::Suresecureivs.SettingArea.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.AnnotatedImage), global::Suresecureivs.AnnotatedImage.Parser, new[]{ "Img", "Comment", "Targets", "SettingAreas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Suresecureivs.Event), global::Suresecureivs.Event.Parser, new[]{ "Guid", "Type", "Seconds", "Description", "Hostaddress", "Channel", "VideoFilename", "FrontendVersion", "AnnoImgs", "PersonNum", "MeterAreaNum", "DeviceIdent" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum SettingAreaType {
    [pbr::OriginalName("meter_area")] MeterArea = 0,
    [pbr::OriginalName("guard_area")] GuardArea = 1,
    [pbr::OriginalName("cross_line")] CrossLine = 2,
    [pbr::OriginalName("atmdoor_area")] AtmdoorArea = 3,
    [pbr::OriginalName("object_protection_area")] ObjectProtectionArea = 4,
  }

  #endregion

  #region Messages
  public sealed partial class GeneralReply : pb::IMessage<GeneralReply> {
    private static readonly pb::MessageParser<GeneralReply> _parser = new pb::MessageParser<GeneralReply>(() => new GeneralReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeneralReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneralReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneralReply(GeneralReply other) : this() {
      errorCode_ = other.errorCode_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneralReply Clone() {
      return new GeneralReply(this);
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private int errorCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeneralReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeneralReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrorCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeneralReply other) {
      if (other == null) {
        return;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeartbeatRequest : pb::IMessage<HeartbeatRequest> {
    private static readonly pb::MessageParser<HeartbeatRequest> _parser = new pb::MessageParser<HeartbeatRequest>(() => new HeartbeatRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartbeatRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartbeatRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartbeatRequest(HeartbeatRequest other) : this() {
      deviceAddress_ = other.deviceAddress_;
      deviceIdent_ = other.deviceIdent_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartbeatRequest Clone() {
      return new HeartbeatRequest(this);
    }

    /// <summary>Field number for the "device_address" field.</summary>
    public const int DeviceAddressFieldNumber = 1;
    private string deviceAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceAddress {
      get { return deviceAddress_; }
      set {
        deviceAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_ident" field.</summary>
    public const int DeviceIdentFieldNumber = 2;
    private string deviceIdent_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceIdent {
      get { return deviceIdent_; }
      set {
        deviceIdent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartbeatRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartbeatRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceAddress != other.DeviceAddress) return false;
      if (DeviceIdent != other.DeviceIdent) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceAddress.Length != 0) hash ^= DeviceAddress.GetHashCode();
      if (DeviceIdent.Length != 0) hash ^= DeviceIdent.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeviceAddress);
      }
      if (DeviceIdent.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceIdent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceAddress);
      }
      if (DeviceIdent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceIdent);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartbeatRequest other) {
      if (other == null) {
        return;
      }
      if (other.DeviceAddress.Length != 0) {
        DeviceAddress = other.DeviceAddress;
      }
      if (other.DeviceIdent.Length != 0) {
        DeviceIdent = other.DeviceIdent;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DeviceAddress = input.ReadString();
            break;
          }
          case 18: {
            DeviceIdent = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Target : pb::IMessage<Target> {
    private static readonly pb::MessageParser<Target> _parser = new pb::MessageParser<Target>(() => new Target());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Target> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Target() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Target(Target other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      w_ = other.w_;
      h_ = other.h_;
      type_ = other.type_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Target Clone() {
      return new Target(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 3;
    private int w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    /// <summary>Field number for the "h" field.</summary>
    public const int HFieldNumber = 4;
    private int h_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int H {
      get { return h_; }
      set {
        h_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::Suresecureivs.Target.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Suresecureivs.Target.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private global::Suresecureivs.Target.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Suresecureivs.Target.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Target);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Target other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (W != other.W) return false;
      if (H != other.H) return false;
      if (Type != other.Type) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (W != 0) hash ^= W.GetHashCode();
      if (H != 0) hash ^= H.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (W != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(W);
      }
      if (H != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(H);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (Status != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (W != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(W);
      }
      if (H != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(H);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Target other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.W != 0) {
        W = other.W;
      }
      if (other.H != 0) {
        H = other.H;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            W = input.ReadInt32();
            break;
          }
          case 32: {
            H = input.ReadInt32();
            break;
          }
          case 40: {
            type_ = (global::Suresecureivs.Target.Types.Type) input.ReadEnum();
            break;
          }
          case 48: {
            status_ = (global::Suresecureivs.Target.Types.Status) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Target message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("PERSON")] Person = 0,
        [pbr::OriginalName("OBJECT")] Object = 1,
      }

      public enum Status {
        [pbr::OriginalName("NORMAL")] Normal = 0,
        [pbr::OriginalName("ABNORMAL")] Abnormal = 1,
      }

    }
    #endregion

  }

  public sealed partial class SettingArea : pb::IMessage<SettingArea> {
    private static readonly pb::MessageParser<SettingArea> _parser = new pb::MessageParser<SettingArea>(() => new SettingArea());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SettingArea> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingArea() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingArea(SettingArea other) : this() {
      type_ = other.type_;
      x_ = other.x_.Clone();
      y_ = other.y_.Clone();
      status_ = other.status_;
      comment_ = other.comment_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingArea Clone() {
      return new SettingArea(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Suresecureivs.SettingAreaType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Suresecureivs.SettingAreaType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_x_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> x_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> X {
      get { return x_; }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_y_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> y_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Y {
      get { return y_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::Suresecureivs.SettingArea.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Suresecureivs.SettingArea.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "comment" field.</summary>
    public const int CommentFieldNumber = 5;
    private string comment_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Comment {
      get { return comment_; }
      set {
        comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SettingArea);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SettingArea other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!x_.Equals(other.x_)) return false;
      if(!y_.Equals(other.y_)) return false;
      if (Status != other.Status) return false;
      if (Comment != other.Comment) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= x_.GetHashCode();
      hash ^= y_.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Comment.Length != 0) hash ^= Comment.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      x_.WriteTo(output, _repeated_x_codec);
      y_.WriteTo(output, _repeated_y_codec);
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (Comment.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Comment);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += x_.CalculateSize(_repeated_x_codec);
      size += y_.CalculateSize(_repeated_y_codec);
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Comment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SettingArea other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      x_.Add(other.x_);
      y_.Add(other.y_);
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Comment.Length != 0) {
        Comment = other.Comment;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Suresecureivs.SettingAreaType) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            x_.AddEntriesFrom(input, _repeated_x_codec);
            break;
          }
          case 26:
          case 24: {
            y_.AddEntriesFrom(input, _repeated_y_codec);
            break;
          }
          case 32: {
            status_ = (global::Suresecureivs.SettingArea.Types.Status) input.ReadEnum();
            break;
          }
          case 42: {
            Comment = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SettingArea message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("NORMAL")] Normal = 0,
        [pbr::OriginalName("ABNORMAL")] Abnormal = 1,
      }

    }
    #endregion

  }

  public sealed partial class AnnotatedImage : pb::IMessage<AnnotatedImage> {
    private static readonly pb::MessageParser<AnnotatedImage> _parser = new pb::MessageParser<AnnotatedImage>(() => new AnnotatedImage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnnotatedImage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotatedImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotatedImage(AnnotatedImage other) : this() {
      img_ = other.img_;
      comment_ = other.comment_;
      targets_ = other.targets_.Clone();
      settingAreas_ = other.settingAreas_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnotatedImage Clone() {
      return new AnnotatedImage(this);
    }

    /// <summary>Field number for the "img" field.</summary>
    public const int ImgFieldNumber = 1;
    private pb::ByteString img_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Img {
      get { return img_; }
      set {
        img_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "comment" field.</summary>
    public const int CommentFieldNumber = 2;
    private string comment_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Comment {
      get { return comment_; }
      set {
        comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "targets" field.</summary>
    public const int TargetsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Suresecureivs.Target> _repeated_targets_codec
        = pb::FieldCodec.ForMessage(26, global::Suresecureivs.Target.Parser);
    private readonly pbc::RepeatedField<global::Suresecureivs.Target> targets_ = new pbc::RepeatedField<global::Suresecureivs.Target>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Suresecureivs.Target> Targets {
      get { return targets_; }
    }

    /// <summary>Field number for the "setting_areas" field.</summary>
    public const int SettingAreasFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Suresecureivs.SettingArea> _repeated_settingAreas_codec
        = pb::FieldCodec.ForMessage(34, global::Suresecureivs.SettingArea.Parser);
    private readonly pbc::RepeatedField<global::Suresecureivs.SettingArea> settingAreas_ = new pbc::RepeatedField<global::Suresecureivs.SettingArea>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Suresecureivs.SettingArea> SettingAreas {
      get { return settingAreas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnnotatedImage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnnotatedImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Img != other.Img) return false;
      if (Comment != other.Comment) return false;
      if(!targets_.Equals(other.targets_)) return false;
      if(!settingAreas_.Equals(other.settingAreas_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Img.Length != 0) hash ^= Img.GetHashCode();
      if (Comment.Length != 0) hash ^= Comment.GetHashCode();
      hash ^= targets_.GetHashCode();
      hash ^= settingAreas_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Img.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Img);
      }
      if (Comment.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Comment);
      }
      targets_.WriteTo(output, _repeated_targets_codec);
      settingAreas_.WriteTo(output, _repeated_settingAreas_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Img.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Img);
      }
      if (Comment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
      }
      size += targets_.CalculateSize(_repeated_targets_codec);
      size += settingAreas_.CalculateSize(_repeated_settingAreas_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnnotatedImage other) {
      if (other == null) {
        return;
      }
      if (other.Img.Length != 0) {
        Img = other.Img;
      }
      if (other.Comment.Length != 0) {
        Comment = other.Comment;
      }
      targets_.Add(other.targets_);
      settingAreas_.Add(other.settingAreas_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Img = input.ReadBytes();
            break;
          }
          case 18: {
            Comment = input.ReadString();
            break;
          }
          case 26: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
          case 34: {
            settingAreas_.AddEntriesFrom(input, _repeated_settingAreas_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The request message containing the user's name.
  /// </summary>
  public sealed partial class Event : pb::IMessage<Event> {
    private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Suresecureivs.SuresecureivsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event(Event other) : this() {
      guid_ = other.guid_;
      type_ = other.type_;
      seconds_ = other.seconds_;
      description_ = other.description_;
      hostaddress_ = other.hostaddress_;
      channel_ = other.channel_;
      videoFilename_ = other.videoFilename_;
      frontendVersion_ = other.frontendVersion_;
      annoImgs_ = other.annoImgs_.Clone();
      personNum_ = other.personNum_;
      meterAreaNum_ = other.meterAreaNum_;
      deviceIdent_ = other.deviceIdent_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event Clone() {
      return new Event(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private string guid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Guid {
      get { return guid_; }
      set {
        guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "seconds" field.</summary>
    public const int SecondsFieldNumber = 3;
    private long seconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Seconds {
      get { return seconds_; }
      set {
        seconds_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hostaddress" field.</summary>
    public const int HostaddressFieldNumber = 5;
    private string hostaddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hostaddress {
      get { return hostaddress_; }
      set {
        hostaddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 6;
    private int channel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "video_filename" field.</summary>
    public const int VideoFilenameFieldNumber = 7;
    private string videoFilename_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VideoFilename {
      get { return videoFilename_; }
      set {
        videoFilename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "frontend_version" field.</summary>
    public const int FrontendVersionFieldNumber = 8;
    private string frontendVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrontendVersion {
      get { return frontendVersion_; }
      set {
        frontendVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "anno_imgs" field.</summary>
    public const int AnnoImgsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Suresecureivs.AnnotatedImage> _repeated_annoImgs_codec
        = pb::FieldCodec.ForMessage(74, global::Suresecureivs.AnnotatedImage.Parser);
    private readonly pbc::RepeatedField<global::Suresecureivs.AnnotatedImage> annoImgs_ = new pbc::RepeatedField<global::Suresecureivs.AnnotatedImage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Suresecureivs.AnnotatedImage> AnnoImgs {
      get { return annoImgs_; }
    }

    /// <summary>Field number for the "person_num" field.</summary>
    public const int PersonNumFieldNumber = 10;
    private int personNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PersonNum {
      get { return personNum_; }
      set {
        personNum_ = value;
      }
    }

    /// <summary>Field number for the "meter_area_num" field.</summary>
    public const int MeterAreaNumFieldNumber = 11;
    private int meterAreaNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MeterAreaNum {
      get { return meterAreaNum_; }
      set {
        meterAreaNum_ = value;
      }
    }

    /// <summary>Field number for the "device_ident" field.</summary>
    public const int DeviceIdentFieldNumber = 12;
    private string deviceIdent_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceIdent {
      get { return deviceIdent_; }
      set {
        deviceIdent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Type != other.Type) return false;
      if (Seconds != other.Seconds) return false;
      if (Description != other.Description) return false;
      if (Hostaddress != other.Hostaddress) return false;
      if (Channel != other.Channel) return false;
      if (VideoFilename != other.VideoFilename) return false;
      if (FrontendVersion != other.FrontendVersion) return false;
      if(!annoImgs_.Equals(other.annoImgs_)) return false;
      if (PersonNum != other.PersonNum) return false;
      if (MeterAreaNum != other.MeterAreaNum) return false;
      if (DeviceIdent != other.DeviceIdent) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid.Length != 0) hash ^= Guid.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Seconds != 0L) hash ^= Seconds.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Hostaddress.Length != 0) hash ^= Hostaddress.GetHashCode();
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (VideoFilename.Length != 0) hash ^= VideoFilename.GetHashCode();
      if (FrontendVersion.Length != 0) hash ^= FrontendVersion.GetHashCode();
      hash ^= annoImgs_.GetHashCode();
      if (PersonNum != 0) hash ^= PersonNum.GetHashCode();
      if (MeterAreaNum != 0) hash ^= MeterAreaNum.GetHashCode();
      if (DeviceIdent.Length != 0) hash ^= DeviceIdent.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Guid);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Seconds != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Seconds);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (Hostaddress.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Hostaddress);
      }
      if (Channel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Channel);
      }
      if (VideoFilename.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(VideoFilename);
      }
      if (FrontendVersion.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(FrontendVersion);
      }
      annoImgs_.WriteTo(output, _repeated_annoImgs_codec);
      if (PersonNum != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(PersonNum);
      }
      if (MeterAreaNum != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MeterAreaNum);
      }
      if (DeviceIdent.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(DeviceIdent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Seconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Seconds);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Hostaddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hostaddress);
      }
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
      }
      if (VideoFilename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VideoFilename);
      }
      if (FrontendVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrontendVersion);
      }
      size += annoImgs_.CalculateSize(_repeated_annoImgs_codec);
      if (PersonNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PersonNum);
      }
      if (MeterAreaNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MeterAreaNum);
      }
      if (DeviceIdent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceIdent);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Event other) {
      if (other == null) {
        return;
      }
      if (other.Guid.Length != 0) {
        Guid = other.Guid;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Seconds != 0L) {
        Seconds = other.Seconds;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Hostaddress.Length != 0) {
        Hostaddress = other.Hostaddress;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      if (other.VideoFilename.Length != 0) {
        VideoFilename = other.VideoFilename;
      }
      if (other.FrontendVersion.Length != 0) {
        FrontendVersion = other.FrontendVersion;
      }
      annoImgs_.Add(other.annoImgs_);
      if (other.PersonNum != 0) {
        PersonNum = other.PersonNum;
      }
      if (other.MeterAreaNum != 0) {
        MeterAreaNum = other.MeterAreaNum;
      }
      if (other.DeviceIdent.Length != 0) {
        DeviceIdent = other.DeviceIdent;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Guid = input.ReadString();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Seconds = input.ReadInt64();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            Hostaddress = input.ReadString();
            break;
          }
          case 48: {
            Channel = input.ReadInt32();
            break;
          }
          case 58: {
            VideoFilename = input.ReadString();
            break;
          }
          case 66: {
            FrontendVersion = input.ReadString();
            break;
          }
          case 74: {
            annoImgs_.AddEntriesFrom(input, _repeated_annoImgs_codec);
            break;
          }
          case 80: {
            PersonNum = input.ReadInt32();
            break;
          }
          case 88: {
            MeterAreaNum = input.ReadInt32();
            break;
          }
          case 98: {
            DeviceIdent = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
